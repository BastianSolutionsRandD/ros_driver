#!/usr/bin/env python
import rospy
import sys

import actionlib
from actionlib_msgs.msg import GoalStatus
from ensenso_camera_msgs.msg import RequestDataMonoAction, RequestDataMonoGoal
from ensenso_camera_msgs.msg import Parameter
from ensenso_camera_msgs.msg import SetParameterAction, SetParameterGoal
from ensenso_camera_msgs.msg import GetParameterAction, GetParameterGoal
from sensor_msgs.msg import Image



def set_camera_parameters():
    
    timeout = rospy.get_param("~timeout", 100)
    
    set_parameter_client = actionlib.SimpleActionClient("set_parameter", SetParameterAction)
    set_parameter_client.wait_for_server()
    if not set_parameter_client.wait_for_server(rospy.Duration(timeout)):
        rospy.logerr("The camera node is not running!")
        sys.exit()

    #goal = SetParameterGoal()
    #print(help(goal))
    #sys.exit()
    set_parameter_client.send_goal(SetParameterGoal(parameters=[Parameter(key=Parameter.AUTO_EXPOSURE, bool_value=True),
    Parameter(key=Parameter.EXPOSURE, float_value=50.0), Parameter(key=Parameter.AUTO_GAIN, bool_value=False),]))
    #Parameter(key=Parameter.GAIN, float_value=1.5) ]))
    set_parameter_client.wait_for_result()
    
    if set_parameter_client.get_state() != GoalStatus.SUCCEEDED:
        rospy.logwarn("Camera param setting action was not successful.")
    else:
        rospy.loginfo('Camera parameters are set')

def get_camera_parameters():
    
    timeout = rospy.get_param("~timeout", 60)
    
    get_parameter_client = actionlib.SimpleActionClient("get_parameter", GetParameterAction)
    get_parameter_client.wait_for_server()
    if not get_parameter_client.wait_for_server(rospy.Duration(timeout)):
        rospy.logerr("The camera node is not running!")
        sys.exit()

    get_parameter_goal = GetParameterGoal()
    
    get_parameter_client.send_goal(GetParameterGoal(keys=[Parameter.EXPOSURE, Parameter.AUTO_EXPOSURE, Parameter.AUTO_GAIN,
    Parameter.GAIN, Parameter.TRIGGER_MODE]))
    get_parameter_client.wait_for_result()

    if get_parameter_client.get_state() != GoalStatus.SUCCEEDED:
        rospy.logwarn("Camera param getting action was not successful.")
    exposure = get_parameter_client.get_result().results[0].float_value
    rospy.loginfo('Exposure value is : {}'.format(exposure))
    
    auto_exposure = get_parameter_client.get_result().results[1].bool_value
    rospy.loginfo('Auto Exposure value is : {}'.format(auto_exposure))
    
    auto_gain = get_parameter_client.get_result().results[2].bool_value
    rospy.loginfo('Auto gain value is : {}'.format(auto_gain))
    
    gain = get_parameter_client.get_result().results[3].float_value
    rospy.loginfo('Gain value is : {}'.format(gain))

    trigger_mode = get_parameter_client.get_result().results[4].string_value
    rospy.loginfo('Trigger mode is:{}'.format(trigger_mode)) #Continous, RisingEdge, FallingEdge
    
    #roi = get_parameter_client.get_result().results[4].region_of_interest_value
    #rospy.loginfo('ROI value is : \n {}'.format(roi))

def main():
    loop_rate = rospy.get_param("~rate", 10)
    timeout = rospy.get_param("~timeout", 60)
    #rgb_namespace = rospy.get_param("~rgb_ns", "/rgb_camera")

    goal = RequestDataMonoGoal()
    goal.parameter_set = rospy.get_param("~parameter_set", "")

    goal.request_raw_images = rospy.get_param("~raw_images", True)
    goal.request_rectified_images = rospy.get_param("~rectified_images", True)

    goal.publish_results = True

    #request_data_client = actionlib.SimpleActionClient(rgb_namespace+"/request_data", RequestDataMonoAction)
    request_data_client = actionlib.SimpleActionClient("/request_data", RequestDataMonoAction)
    if not request_data_client.wait_for_server(rospy.Duration(timeout)):
        rospy.logerr("The camera node is not running!")
        sys.exit()

    rate = rospy.Rate(loop_rate)
    while not rospy.is_shutdown():
        request_data_client.send_goal(goal)
        request_data_client.wait_for_result()

        if request_data_client.get_state() != GoalStatus.SUCCEEDED:
            rospy.logwarn("Image streaming Action was not successful.")
        else:
            result = request_data_client.get_result()
            if result.error.code != 0:
                rospy.logerr("Error {}: {}".format(result.error.code, result.error.message))

        rate.sleep()


if __name__ == "__main__":
    try:
        rospy.init_node("ensenso_camera_request_data_set_cam_params")
        rospy.loginfo('CAMERA PARAMETERS BEFORE:')
        get_camera_parameters()
        #set_camera_parameters()
        #rospy.loginfo('CAMERA PARAMETERS AFTER:')
        #get_camera_parameters()
        main()
    except rospy.ROSInterruptException:
        pass
